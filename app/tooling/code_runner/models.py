"""Pydantic models for the code execution sandbox."""

from __future__ import annotations

from typing import Literal

from pydantic import BaseModel, Field


class ExecutionLimits(BaseModel):
    """Resource quotas governing a sandboxed code execution."""

    timeout_seconds: float = Field(
        default=5.0,
        gt=0.1,
        le=30.0,
        description="Wall-clock timeout before the runner terminates the process.",
    )
    cpu_seconds: float = Field(
        default=2.0,
        gt=0.1,
        le=20.0,
        description="CPU time limit enforced via rlimits.",
    )
    memory_limit_mb: int = Field(
        default=256,
        ge=32,
        le=2048,
        description="Maximum resident set size allotted to the process in megabytes.",
    )
    stdout_limit_kb: int = Field(
        default=64,
        ge=4,
        le=1024,
        description="Maximum size of captured stdout/stderr before truncation (per stream).",
    )


class CodeRunRequest(BaseModel):
    """Execution request accepted by the sandbox."""

    code: str = Field(..., description="Python source code to execute inside the sandbox.")
    language: Literal["python"] = Field(
        default="python", description="Language tag; currently only Python is supported."
    )
    limits: ExecutionLimits = Field(
        default_factory=ExecutionLimits,
        description="Resource constraints placed on the execution.",
    )
    environment: dict[str, str] = Field(
        default_factory=dict,
        description="Whitelisted environment variables exposed to the runtime.",
    )
    args: list[str] = Field(
        default_factory=list,
        description="Command line arguments passed to the executed program.",
    )


class CodeArtifact(BaseModel):
    """Metadata describing a file generated by the execution."""

    path: str = Field(..., description="Relative path of the artifact inside the sandbox.")
    size_bytes: int = Field(..., ge=0, description="Size of the artifact in bytes.")


class CodeRunResponse(BaseModel):
    """Structured run result returned by the sandbox."""

    exit_code: int | None = Field(
        ..., description="Process exit code; None when the runner terminated execution."
    )
    runtime_seconds: float = Field(..., ge=0.0, description="Wall-clock runtime of the execution.")
    timed_out: bool = Field(..., description="True when the execution exceeded the timeout.")
    stdout: str = Field(..., description="Captured stdout, truncated when limits are exceeded.")
    stderr: str = Field(..., description="Captured stderr, truncated when limits are exceeded.")
    stdout_truncated: bool = Field(..., description="True if stdout exceeded its byte budget.")
    stderr_truncated: bool = Field(..., description="True if stderr exceeded its byte budget.")
    artifacts: list[CodeArtifact] = Field(
        default_factory=list,
        description="Artifacts persisted by the execution.",
    )
